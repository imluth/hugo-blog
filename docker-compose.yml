name: hugo-blog

services:
  hugo-blog:
    container_name: hugo-blog
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
      no_cache: true
    image: ${DOCKER_REGISTRY-}hugo-blog:latest
    restart: unless-stopped
    networks:
      - traefik-public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      # HTTP to HTTPS redirect for both www and non-www
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:(www\\.)?looth\\.io}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # Main HTTPS rules
      - "traefik.http.routers.hugo-blog.rule=Host(`www.looth.io`) || Host(`looth.io`)"
      - "traefik.http.routers.hugo-blog.entrypoints=websecure"
      - "traefik.http.routers.hugo-blog.tls.certresolver=leresolver"
      - "traefik.http.services.hugo-blog.loadbalancer.server.port=80"
      # Redirect non-www to www for HTTPS
      - "traefik.http.routers.hugo-blog-redirect.rule=Host(`looth.io`)"
      - "traefik.http.routers.hugo-blog-redirect.entrypoints=websecure"
      - "traefik.http.routers.hugo-blog-redirect.tls.certresolver=leresolver"
      - "traefik.http.routers.hugo-blog-redirect.middlewares=redirect-to-www"
      - "traefik.http.middlewares.redirect-to-www.redirectregex.regex=^https://looth.io/(.*)"
      - "traefik.http.middlewares.redirect-to-www.redirectregex.replacement=https://www.looth.io/$${1}"
      - "traefik.http.middlewares.redirect-to-www.redirectregex.permanent=true"

networks:
  traefik-public:
    external: true